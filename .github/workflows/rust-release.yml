# .github/workflows/rust-release.yml

name: Build and Release Rust Project via Dockerfile

# 该工作流使用 workflow_dispatch 手动触发
on:
  workflow_dispatch:
    inputs:
      tag:
        description: '要创建和发布的 Tag，例如 v1.0.0'
        required: true
        type: string

# 设置环境变量，让 cargo 的输出带有颜色
env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release for amd64
    runs-on: ubuntu-latest
    steps:
      # 1. 检出你的代码和 Dockerfile
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 从 Cargo.toml 中动态获取项目名称
      - name: Get project name
        id: get_project_name
        run: |
          echo "PROJECT_NAME=$(grep '^name' Cargo.toml | head -n 1 | sed -e 's/name = "//' -e 's/"//')" >> $GITHUB_ENV

      # 3. 构建 Release 版本的 Docker 镜像
      #    我们复用项目中的 Dockerfile，并通过 --build-arg 传入构建类型
      #    注意 --file 参数已指向新的文件路径
      - name: Build release image
        run: |
          docker build . \
            --file docker/amd64/Dockerfile \
            --tag ${{ env.PROJECT_NAME }}:release \
            --build-arg BUILD_PROFILE=release

      # 4. 构建 Debug 版本的 Docker 镜像
      #    同样复用 Dockerfile，只是传入不同的构建类型
      - name: Build debug image
        run: |
          docker build . \
            --file docker/amd64/Dockerfile \
            --tag ${{ env.PROJECT_NAME }}:debug \
            --build-arg BUILD_PROFILE=debug

      # 5. 从 Docker 镜像中提取编译好的二进制文件
      #    我们通过临时运行容器并使用 `cat` 命令来提取产物
      - name: Extract artifacts from images
        run: |
          echo "Extracting binaries..."
          # 提取 release 版本
          docker run --rm --entrypoint cat ${{ env.PROJECT_NAME }}:release /root/app > ${{ github.workspace }}/${{ env.PROJECT_NAME }}
          # 提取 debug 版本
          docker run --rm --entrypoint cat ${{ env.PROJECT_NAME }}:debug /root/app > ${{ github.workspace }}/${{ env.PROJECT_NAME }}-debug
          echo "Artifacts prepared:"
          ls -l ${{ env.PROJECT_NAME }}*

      # 6. 使用输入的 tag 创建 GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          body: |
            ## Release Notes
            - Statically linked Linux binaries (x86_64-musl).
            - Includes both release and debug versions.
            - Built via a reusable Dockerfile.
          draft: false
          prerelease: false

      # 7. 上传 Release 版本的二进制文件
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}
          asset_name: ${{ env.PROJECT_NAME }}-amd64 # 在文件名中加入架构标识
          asset_content_type: application/octet-stream

      # 8. 上传 Debug 版本的二进制文件
      - name: Upload Debug Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-debug
          asset_name: ${{ env.PROJECT_NAME }}-debug-amd64 # 在文件名中加入架构标识
          asset_content_type: application/octet-stream

# .github/workflows/rust-release.yml

name: Build and Release Rust Project via Dockerfile

# 该工作流使用 workflow_dispatch 手动触发
on:
  workflow_dispatch:
    inputs:
      tag:
        description: '要创建和发布的 Tag，例如 v1.0.0'
        required: true
        type: string

# 设置环境变量，让 cargo 的输出带有颜色
env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get project name
        id: get_project_name
        run: echo "PROJECT_NAME=$(grep '^name' Cargo.toml | head -n 1 | sed -e 's/name = "//' -e 's/"//')" >> $GITHUB_ENV

      - name: Build release image
        run: |
          docker build . \
            --file docker/amd64/Dockerfile \
            --tag ${{ env.PROJECT_NAME }}:release \
            --build-arg BUILD_PROFILE=release
      
      - name: Extract release artifact
        run: |
          mkdir -p artifacts
          docker run --rm --entrypoint cat ${{ env.PROJECT_NAME }}:release /root/app > artifacts/${{ env.PROJECT_NAME }}-amd64

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-binary
          path: artifacts/${{ env.PROJECT_NAME }}-amd64

  build-debug:
    name: Build Debug Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get project name
        id: get_project_name
        run: echo "PROJECT_NAME=$(grep '^name' Cargo.toml | head -n 1 | sed -e 's/name = "//' -e 's/"//')" >> $GITHUB_ENV

      - name: Build debug image
        run: |
          docker build . \
            --file docker/amd64/Dockerfile \
            --tag ${{ env.PROJECT_NAME }}:debug \
            --build-arg BUILD_PROFILE=debug

      - name: Extract debug artifact
        run: |
          mkdir -p artifacts
          docker run --rm --entrypoint cat ${{ env.PROJECT_NAME }}:debug /root/app > artifacts/${{ env.PROJECT_NAME }}-debug-amd64
      
      - name: Upload debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-binary
          path: artifacts/${{ env.PROJECT_NAME }}-debug-amd64

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    # 等待 build-release 和 build-debug 两个作业都成功完成后再运行
    needs: [build-release, build-debug]
    permissions:
      contents: write # 授予创建 Release 的权限
    steps:
      - name: Get project name
        # 注意：由于这是个新作业，我们需要再次获取项目名
        # 为了避免重复检出代码，我们直接从 needs 上下文中获取
        # 这是一个小技巧，但为了简单起见，我们还是重新检出和获取
        run: |
          # 这是一个临时的解决方案，在实际复杂场景中，你可能希望通过其他方式传递项目名
          # 但对于当前场景，我们简单地硬编码或再次获取
          # 这里我们先假设项目名，在实际使用中请确保它与构建作业中的一致
          # 或者，更稳妥的方式是也进行一次 checkout 和 get project name
          echo "PROJECT_NAME=q-seal" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # 下载所有工件到当前目录
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          body: |
            ## Release Notes
            - Statically linked Linux binaries (x86_64-musl).
            - Includes both release and debug versions, built in parallel.
            - Built via a reusable Dockerfile.

      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-binary/${{ env.PROJECT_NAME }}-amd64
          asset_name: ${{ env.PROJECT_NAME }}-amd64

      - name: Upload Debug Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/debug-binary/${{ env.PROJECT_NAME }}-debug-amd64
          asset_name: ${{ env.PROJECT_NAME }}-debug-amd64
